from collections import deque

# Два коня
# (Время: 1 сек. Память: 16 Мб Сложность: 55%)
# На стандартной шахматной доске (8х8) живут 2 шахматных коня: красный и зеленый. Обычно они беззаботно скачут по просторам доски, пощипывая шахматную травку, но сегодня особенный день: у зеленого коня день рождения. зеленый конь решил отпраздновать это событие вместе с красным. Но для осуществления этого прекрасного плана им нужно оказаться на одной клетке. Заметим, что красный и зеленый шахматные кони сильно отличаются от черного с белым: они ходят не по очереди, а одновременно, и если оказываются на одной клетке, никто никого не съедает. Сколько ходов им потребуется, чтобы насладиться праздником?

# Входные данные
# Во входном файле INPUT.TXT содержатся координаты коней, записанные по стандартным шахматным правилам (т.е. двумя символами - маленькая английская буква (от a до h) и цифра (от 1 до 8), задающие столбец и строку соответственно).

# Выходные данные
# Выходной файл OUTPUT.TXT должен содержать наименьшее необходимое количество ходов, либо -1, если кони не могут встретиться.

def two_knights_meet(pos1, pos2):
   moves = [(-2, -1), (-1, -2), (-2, 1), (-1, 2),
            (1, -2), (2, -1), (1, 2), (2, 1)]
   
   def get_index(pos):
      return ord(pos[0]) - ord('a'), int(pos[1]) - 1
   
   start1 = get_index(pos1)
   start2 = get_index(pos2)
   
   queue = deque()
   visited = [[[ [False]*8 for _ in range(8)] for _ in range(8)] for _ in range(8)]
   queue.append((start1[0], start1[1], start2[0], start2[1], 0))
   visited[start1[0]][start1[1]][start2[0]][start2[1]] = True

   while queue:
      x1, y1, x2, y2, d = queue.popleft()
      if x1 == x2 and y1 == y2:
         return d
      for dx1, dy1 in moves:
         nx1, ny1 = x1 + dx1, y1 + dy1
         if not (0 <= nx1 < 8 and 0 <= ny1 < 8):
            nx1, ny1 = x1, y1
         for dx2, dy2 in moves:
            nx2, ny2 = x2 + dx2, y2 + dy2
            if not (0 <= nx2 < 8 and 0 <= ny2 < 8):
               nx2, ny2 = x2, y2
            if not visited[nx1][ny1][nx2][ny2]:
               visited[nx1][ny1][nx2][ny2] = True
               queue.append((nx1, ny1, nx2, ny2, d + 1))
   
   return -1

print(two_knights_meet('a1', 'h8'))
